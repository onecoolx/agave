/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG) && ENABLE(SVG_EXPERIMENTAL_FEATURES)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGFECompositeElement.h"

#include <wtf/GetPtr.h>

#include "CSSMutableStyleDeclaration.h"
#include "CSSStyleDeclaration.h"
#include "CSSValue.h"
#include "JSCSSStyleDeclaration.h"
#include "JSCSSValue.h"
#include "JSSVGAnimatedEnumeration.h"
#include "JSSVGAnimatedLength.h"
#include "JSSVGAnimatedNumber.h"
#include "JSSVGAnimatedString.h"
#include "SVGFECompositeElement.h"

using namespace KJS;

namespace WebCore {

/* Hash table */

static const HashEntry JSSVGFECompositeElementTableEntries[] =
{
    { 0, 0, 0, 0, 0 },
    { "y", JSSVGFECompositeElement::YAttrNum, DontDelete|ReadOnly, 0, &JSSVGFECompositeElementTableEntries[15] },
    { "_operator", JSSVGFECompositeElement::_operatorAttrNum, DontDelete|ReadOnly, 0, &JSSVGFECompositeElementTableEntries[16] },
    { "k1", JSSVGFECompositeElement::K1AttrNum, DontDelete|ReadOnly, 0, &JSSVGFECompositeElementTableEntries[17] },
    { 0, 0, 0, 0, 0 },
    { "in2", JSSVGFECompositeElement::In2AttrNum, DontDelete|ReadOnly, 0, 0 },
    { "in1", JSSVGFECompositeElement::In1AttrNum, DontDelete|ReadOnly, 0, &JSSVGFECompositeElementTableEntries[18] },
    { 0, 0, 0, 0, 0 },
    { "x", JSSVGFECompositeElement::XAttrNum, DontDelete|ReadOnly, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { "k3", JSSVGFECompositeElement::K3AttrNum, DontDelete|ReadOnly, 0, &JSSVGFECompositeElementTableEntries[19] },
    { "constructor", JSSVGFECompositeElement::ConstructorAttrNum, DontDelete|DontEnum|ReadOnly, 0, 0 },
    { "k2", JSSVGFECompositeElement::K2AttrNum, DontDelete|ReadOnly, 0, 0 },
    { "k4", JSSVGFECompositeElement::K4AttrNum, DontDelete|ReadOnly, 0, 0 },
    { "width", JSSVGFECompositeElement::WidthAttrNum, DontDelete|ReadOnly, 0, 0 },
    { "height", JSSVGFECompositeElement::HeightAttrNum, DontDelete|ReadOnly, 0, 0 },
    { "result", JSSVGFECompositeElement::ResultAttrNum, DontDelete|ReadOnly, 0, 0 },
    { "className", JSSVGFECompositeElement::ClassNameAttrNum, DontDelete|ReadOnly, 0, 0 },
    { "style", JSSVGFECompositeElement::StyleAttrNum, DontDelete|ReadOnly, 0, 0 }
};

static const HashTable JSSVGFECompositeElementTable = 
{
    2, 20, JSSVGFECompositeElementTableEntries, 15
};

/* Hash table for constructor */

static const HashEntry JSSVGFECompositeElementConstructorTableEntries[] =
{
    { 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { "SVG_FECOMPOSITE_OPERATOR_OUT", WebCore::SVG_FECOMPOSITE_OPERATOR_OUT, DontDelete|ReadOnly, 0, 0 },
    { "SVG_FECOMPOSITE_OPERATOR_ATOP", WebCore::SVG_FECOMPOSITE_OPERATOR_ATOP, DontDelete|ReadOnly, 0, 0 },
    { "SVG_FECOMPOSITE_OPERATOR_ARITHMETIC", WebCore::SVG_FECOMPOSITE_OPERATOR_ARITHMETIC, DontDelete|ReadOnly, 0, 0 },
    { "SVG_FECOMPOSITE_OPERATOR_OVER", WebCore::SVG_FECOMPOSITE_OPERATOR_OVER, DontDelete|ReadOnly, 0, 0 },
    { "SVG_FECOMPOSITE_OPERATOR_UNKNOWN", WebCore::SVG_FECOMPOSITE_OPERATOR_UNKNOWN, DontDelete|ReadOnly, 0, &JSSVGFECompositeElementConstructorTableEntries[7] },
    { "SVG_FECOMPOSITE_OPERATOR_IN", WebCore::SVG_FECOMPOSITE_OPERATOR_IN, DontDelete|ReadOnly, 0, &JSSVGFECompositeElementConstructorTableEntries[8] },
    { "SVG_FECOMPOSITE_OPERATOR_XOR", WebCore::SVG_FECOMPOSITE_OPERATOR_XOR, DontDelete|ReadOnly, 0, 0 }
};

static const HashTable JSSVGFECompositeElementConstructorTable = 
{
    2, 9, JSSVGFECompositeElementConstructorTableEntries, 7
};

class JSSVGFECompositeElementConstructor : public DOMObject {
public:
    JSSVGFECompositeElementConstructor(ExecState* exec)
    {
        setPrototype(exec->lexicalInterpreter()->builtinObjectPrototype());
        putDirect(exec->propertyNames().prototype, JSSVGFECompositeElementPrototype::self(exec), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    JSValue* getValueProperty(ExecState*, int token) const;
    virtual const ClassInfo* classInfo() const { return &info; }
    static const ClassInfo info;

    virtual bool implementsHasInstance() const { return true; }
};

const ClassInfo JSSVGFECompositeElementConstructor::info = { "SVGFECompositeElementConstructor", 0, &JSSVGFECompositeElementConstructorTable, 0 };

bool JSSVGFECompositeElementConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGFECompositeElementConstructor, DOMObject>(exec, &JSSVGFECompositeElementConstructorTable, this, propertyName, slot);
}

JSValue* JSSVGFECompositeElementConstructor::getValueProperty(ExecState*, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(token);
}

/* Hash table for prototype */

static const HashEntry JSSVGFECompositeElementPrototypeTableEntries[] =
{
    { "SVG_FECOMPOSITE_OPERATOR_XOR", WebCore::SVG_FECOMPOSITE_OPERATOR_XOR, DontDelete|ReadOnly, 0, 0 },
    { "SVG_FECOMPOSITE_OPERATOR_OUT", WebCore::SVG_FECOMPOSITE_OPERATOR_OUT, DontDelete|ReadOnly, 0, &JSSVGFECompositeElementPrototypeTableEntries[9] },
    { "SVG_FECOMPOSITE_OPERATOR_UNKNOWN", WebCore::SVG_FECOMPOSITE_OPERATOR_UNKNOWN, DontDelete|ReadOnly, 0, &JSSVGFECompositeElementPrototypeTableEntries[8] },
    { 0, 0, 0, 0, 0 },
    { "SVG_FECOMPOSITE_OPERATOR_IN", WebCore::SVG_FECOMPOSITE_OPERATOR_IN, DontDelete|ReadOnly, 0, &JSSVGFECompositeElementPrototypeTableEntries[10] },
    { "SVG_FECOMPOSITE_OPERATOR_OVER", WebCore::SVG_FECOMPOSITE_OPERATOR_OVER, DontDelete|ReadOnly, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { "SVG_FECOMPOSITE_OPERATOR_ATOP", WebCore::SVG_FECOMPOSITE_OPERATOR_ATOP, DontDelete|ReadOnly, 0, 0 },
    { "SVG_FECOMPOSITE_OPERATOR_ARITHMETIC", WebCore::SVG_FECOMPOSITE_OPERATOR_ARITHMETIC, DontDelete|ReadOnly, 0, 0 },
    { "getPresentationAttribute", JSSVGFECompositeElement::GetPresentationAttributeFuncNum, DontDelete|Function, 1, 0 }
};

static const HashTable JSSVGFECompositeElementPrototypeTable = 
{
    2, 11, JSSVGFECompositeElementPrototypeTableEntries, 8
};

const ClassInfo JSSVGFECompositeElementPrototype::info = { "SVGFECompositeElementPrototype", 0, &JSSVGFECompositeElementPrototypeTable, 0 };

JSObject* JSSVGFECompositeElementPrototype::self(ExecState* exec)
{
    return KJS::cacheGlobalObject<JSSVGFECompositeElementPrototype>(exec, "[[JSSVGFECompositeElement.prototype]]");
}

bool JSSVGFECompositeElementPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticPropertySlot<JSSVGFECompositeElementPrototypeFunction, JSSVGFECompositeElementPrototype, JSObject>(exec, &JSSVGFECompositeElementPrototypeTable, this, propertyName, slot);
}

JSValue* JSSVGFECompositeElementPrototype::getValueProperty(ExecState*, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(token);
}

const ClassInfo JSSVGFECompositeElement::info = { "SVGFECompositeElement", &JSSVGElement::info, &JSSVGFECompositeElementTable, 0 };

JSSVGFECompositeElement::JSSVGFECompositeElement(ExecState* exec, SVGFECompositeElement* impl)
    : JSSVGElement(exec, impl)
{
    setPrototype(JSSVGFECompositeElementPrototype::self(exec));
}

bool JSSVGFECompositeElement::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGFECompositeElement, JSSVGElement>(exec, &JSSVGFECompositeElementTable, this, propertyName, slot);
}

JSValue* JSSVGFECompositeElement::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case In1AttrNum: {
        SVGFECompositeElement* imp = static_cast<SVGFECompositeElement*>(impl());

        RefPtr<SVGAnimatedString> obj = imp->in1Animated();
        return toJS(exec, obj.get(), imp);
    }
    case In2AttrNum: {
        SVGFECompositeElement* imp = static_cast<SVGFECompositeElement*>(impl());

        RefPtr<SVGAnimatedString> obj = imp->in2Animated();
        return toJS(exec, obj.get(), imp);
    }
    case _operatorAttrNum: {
        SVGFECompositeElement* imp = static_cast<SVGFECompositeElement*>(impl());

        RefPtr<SVGAnimatedEnumeration> obj = imp->_operatorAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case K1AttrNum: {
        SVGFECompositeElement* imp = static_cast<SVGFECompositeElement*>(impl());

        RefPtr<SVGAnimatedNumber> obj = imp->k1Animated();
        return toJS(exec, obj.get(), imp);
    }
    case K2AttrNum: {
        SVGFECompositeElement* imp = static_cast<SVGFECompositeElement*>(impl());

        RefPtr<SVGAnimatedNumber> obj = imp->k2Animated();
        return toJS(exec, obj.get(), imp);
    }
    case K3AttrNum: {
        SVGFECompositeElement* imp = static_cast<SVGFECompositeElement*>(impl());

        RefPtr<SVGAnimatedNumber> obj = imp->k3Animated();
        return toJS(exec, obj.get(), imp);
    }
    case K4AttrNum: {
        SVGFECompositeElement* imp = static_cast<SVGFECompositeElement*>(impl());

        RefPtr<SVGAnimatedNumber> obj = imp->k4Animated();
        return toJS(exec, obj.get(), imp);
    }
    case XAttrNum: {
        SVGFECompositeElement* imp = static_cast<SVGFECompositeElement*>(impl());

        RefPtr<SVGAnimatedLength> obj = imp->xAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case YAttrNum: {
        SVGFECompositeElement* imp = static_cast<SVGFECompositeElement*>(impl());

        RefPtr<SVGAnimatedLength> obj = imp->yAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case WidthAttrNum: {
        SVGFECompositeElement* imp = static_cast<SVGFECompositeElement*>(impl());

        RefPtr<SVGAnimatedLength> obj = imp->widthAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case HeightAttrNum: {
        SVGFECompositeElement* imp = static_cast<SVGFECompositeElement*>(impl());

        RefPtr<SVGAnimatedLength> obj = imp->heightAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ResultAttrNum: {
        SVGFECompositeElement* imp = static_cast<SVGFECompositeElement*>(impl());

        RefPtr<SVGAnimatedString> obj = imp->resultAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ClassNameAttrNum: {
        SVGFECompositeElement* imp = static_cast<SVGFECompositeElement*>(impl());

        RefPtr<SVGAnimatedString> obj = imp->classNameAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case StyleAttrNum: {
        SVGFECompositeElement* imp = static_cast<SVGFECompositeElement*>(impl());

        return toJS(exec, WTF::getPtr(imp->style()));
    }
    case ConstructorAttrNum:
        return getConstructor(exec);
    }
    return 0;
}

JSValue* JSSVGFECompositeElement::getConstructor(ExecState* exec)
{
    return KJS::cacheGlobalObject<JSSVGFECompositeElementConstructor>(exec, "[[SVGFECompositeElement.constructor]]");
}
JSValue* JSSVGFECompositeElementPrototypeFunction::callAsFunction(ExecState* exec, JSObject* thisObj, const List& args)
{
    if (!thisObj->inherits(&JSSVGFECompositeElement::info))
      return throwError(exec, TypeError);

    JSSVGFECompositeElement* castedThisObj = static_cast<JSSVGFECompositeElement*>(thisObj);
    SVGFECompositeElement* imp = static_cast<SVGFECompositeElement*>(castedThisObj->impl());

    switch (id) {
    case JSSVGFECompositeElement::GetPresentationAttributeFuncNum: {
        String name = args[0]->toString(exec);


        KJS::JSValue* result = toJS(exec, WTF::getPtr(imp->getPresentationAttribute(name)));
        return result;
    }
    }
    return 0;
}

}

#endif // ENABLE(SVG) && ENABLE(SVG_EXPERIMENTAL_FEATURES)
