/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGCircleElement.h"

#include <wtf/GetPtr.h>

#include "CSSMutableStyleDeclaration.h"
#include "CSSStyleDeclaration.h"
#include "CSSValue.h"
#include "JSCSSStyleDeclaration.h"
#include "JSCSSValue.h"
#include "JSSVGAnimatedBoolean.h"
#include "JSSVGAnimatedLength.h"
#include "JSSVGAnimatedString.h"
#include "JSSVGAnimatedTransformList.h"
#include "JSSVGElement.h"
#include "JSSVGMatrix.h"
#include "JSSVGRect.h"
#include "JSSVGStringList.h"
#include "PlatformString.h"
#include "SVGCircleElement.h"
#include "SVGElement.h"
#include "SVGStringList.h"

using namespace KJS;

namespace WebCore {

/* Hash table */

static const HashEntry JSSVGCircleElementTableEntries[] =
{
    { "xmlspace", JSSVGCircleElement::XmlspaceAttrNum, DontDelete, 0, 0 },
    { "requiredFeatures", JSSVGCircleElement::RequiredFeaturesAttrNum, DontDelete|ReadOnly, 0, 0 },
    { "style", JSSVGCircleElement::StyleAttrNum, DontDelete|ReadOnly, 0, 0 },
    { "cy", JSSVGCircleElement::CyAttrNum, DontDelete|ReadOnly, 0, 0 },
    { "systemLanguage", JSSVGCircleElement::SystemLanguageAttrNum, DontDelete|ReadOnly, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { "xmllang", JSSVGCircleElement::XmllangAttrNum, DontDelete, 0, 0 },
    { "cx", JSSVGCircleElement::CxAttrNum, DontDelete|ReadOnly, 0, &JSSVGCircleElementTableEntries[14] },
    { "className", JSSVGCircleElement::ClassNameAttrNum, DontDelete|ReadOnly, 0, 0 },
    { "externalResourcesRequired", JSSVGCircleElement::ExternalResourcesRequiredAttrNum, DontDelete|ReadOnly, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { "requiredExtensions", JSSVGCircleElement::RequiredExtensionsAttrNum, DontDelete|ReadOnly, 0, &JSSVGCircleElementTableEntries[16] },
    { 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { "r", JSSVGCircleElement::RAttrNum, DontDelete|ReadOnly, 0, &JSSVGCircleElementTableEntries[15] },
    { "transform", JSSVGCircleElement::TransformAttrNum, DontDelete|ReadOnly, 0, 0 },
    { "nearestViewportElement", JSSVGCircleElement::NearestViewportElementAttrNum, DontDelete|ReadOnly, 0, &JSSVGCircleElementTableEntries[17] },
    { "farthestViewportElement", JSSVGCircleElement::FarthestViewportElementAttrNum, DontDelete|ReadOnly, 0, 0 }
};

static const HashTable JSSVGCircleElementTable = 
{
    2, 18, JSSVGCircleElementTableEntries, 14
};

/* Hash table for prototype */

static const HashEntry JSSVGCircleElementPrototypeTableEntries[] =
{
    { "getPresentationAttribute", JSSVGCircleElement::GetPresentationAttributeFuncNum, DontDelete|Function, 1, 0 },
    { "hasExtension", JSSVGCircleElement::HasExtensionFuncNum, DontDelete|Function, 1, 0 },
    { "getCTM", JSSVGCircleElement::GetCTMFuncNum, DontDelete|Function, 0, 0 },
    { "getScreenCTM", JSSVGCircleElement::GetScreenCTMFuncNum, DontDelete|Function, 0, 0 },
    { "getTransformToElement", JSSVGCircleElement::GetTransformToElementFuncNum, DontDelete|Function, 1, 0 },
    { "getBBox", JSSVGCircleElement::GetBBoxFuncNum, DontDelete|Function, 0, 0 }
};

static const HashTable JSSVGCircleElementPrototypeTable = 
{
    2, 6, JSSVGCircleElementPrototypeTableEntries, 6
};

const ClassInfo JSSVGCircleElementPrototype::info = { "SVGCircleElementPrototype", 0, &JSSVGCircleElementPrototypeTable, 0 };

JSObject* JSSVGCircleElementPrototype::self(ExecState* exec)
{
    return KJS::cacheGlobalObject<JSSVGCircleElementPrototype>(exec, "[[JSSVGCircleElement.prototype]]");
}

bool JSSVGCircleElementPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSSVGCircleElementPrototypeFunction, JSObject>(exec, &JSSVGCircleElementPrototypeTable, this, propertyName, slot);
}

const ClassInfo JSSVGCircleElement::info = { "SVGCircleElement", &JSSVGElement::info, &JSSVGCircleElementTable, 0 };

JSSVGCircleElement::JSSVGCircleElement(ExecState* exec, SVGCircleElement* impl)
    : JSSVGElement(exec, impl)
{
    setPrototype(JSSVGCircleElementPrototype::self(exec));
}

bool JSSVGCircleElement::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGCircleElement, JSSVGElement>(exec, &JSSVGCircleElementTable, this, propertyName, slot);
}

JSValue* JSSVGCircleElement::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case CxAttrNum: {
        SVGCircleElement* imp = static_cast<SVGCircleElement*>(impl());

        RefPtr<SVGAnimatedLength> obj = imp->cxAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case CyAttrNum: {
        SVGCircleElement* imp = static_cast<SVGCircleElement*>(impl());

        RefPtr<SVGAnimatedLength> obj = imp->cyAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case RAttrNum: {
        SVGCircleElement* imp = static_cast<SVGCircleElement*>(impl());

        RefPtr<SVGAnimatedLength> obj = imp->rAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case RequiredFeaturesAttrNum: {
        SVGCircleElement* imp = static_cast<SVGCircleElement*>(impl());

        return toJS(exec, WTF::getPtr(imp->requiredFeatures()), imp);
    }
    case RequiredExtensionsAttrNum: {
        SVGCircleElement* imp = static_cast<SVGCircleElement*>(impl());

        return toJS(exec, WTF::getPtr(imp->requiredExtensions()), imp);
    }
    case SystemLanguageAttrNum: {
        SVGCircleElement* imp = static_cast<SVGCircleElement*>(impl());

        return toJS(exec, WTF::getPtr(imp->systemLanguage()), imp);
    }
    case XmllangAttrNum: {
        SVGCircleElement* imp = static_cast<SVGCircleElement*>(impl());

        return jsString(imp->xmllang());
    }
    case XmlspaceAttrNum: {
        SVGCircleElement* imp = static_cast<SVGCircleElement*>(impl());

        return jsString(imp->xmlspace());
    }
    case ExternalResourcesRequiredAttrNum: {
        SVGCircleElement* imp = static_cast<SVGCircleElement*>(impl());

        RefPtr<SVGAnimatedBoolean> obj = imp->externalResourcesRequiredAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ClassNameAttrNum: {
        SVGCircleElement* imp = static_cast<SVGCircleElement*>(impl());

        RefPtr<SVGAnimatedString> obj = imp->classNameAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case StyleAttrNum: {
        SVGCircleElement* imp = static_cast<SVGCircleElement*>(impl());

        return toJS(exec, WTF::getPtr(imp->style()));
    }
    case TransformAttrNum: {
        SVGCircleElement* imp = static_cast<SVGCircleElement*>(impl());

        RefPtr<SVGAnimatedTransformList> obj = imp->transformAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case NearestViewportElementAttrNum: {
        SVGCircleElement* imp = static_cast<SVGCircleElement*>(impl());

        return toJS(exec, WTF::getPtr(imp->nearestViewportElement()));
    }
    case FarthestViewportElementAttrNum: {
        SVGCircleElement* imp = static_cast<SVGCircleElement*>(impl());

        return toJS(exec, WTF::getPtr(imp->farthestViewportElement()));
    }
    }
    return 0;
}

void JSSVGCircleElement::put(ExecState* exec, const Identifier& propertyName, JSValue* value, int attr)
{
    lookupPut<JSSVGCircleElement, JSSVGElement>(exec, propertyName, value, attr, &JSSVGCircleElementTable, this);
}

void JSSVGCircleElement::putValueProperty(ExecState* exec, int token, JSValue* value, int /*attr*/)
{
    switch (token) {
    case XmllangAttrNum: {
        SVGCircleElement* imp = static_cast<SVGCircleElement*>(impl());

        imp->setXmllang(value->toString(exec));
        break;
    }
    case XmlspaceAttrNum: {
        SVGCircleElement* imp = static_cast<SVGCircleElement*>(impl());

        imp->setXmlspace(value->toString(exec));
        break;
    }
    }
}

JSValue* JSSVGCircleElementPrototypeFunction::callAsFunction(ExecState* exec, JSObject* thisObj, const List& args)
{
    if (!thisObj->inherits(&JSSVGCircleElement::info))
      return throwError(exec, TypeError);

    JSSVGCircleElement* castedThisObj = static_cast<JSSVGCircleElement*>(thisObj);
    SVGCircleElement* imp = static_cast<SVGCircleElement*>(castedThisObj->impl());

    switch (id) {
    case JSSVGCircleElement::HasExtensionFuncNum: {
        String extension = args[0]->toString(exec);


        KJS::JSValue* result = jsBoolean(imp->hasExtension(extension));
        return result;
    }
    case JSSVGCircleElement::GetPresentationAttributeFuncNum: {
        String name = args[0]->toString(exec);


        KJS::JSValue* result = toJS(exec, WTF::getPtr(imp->getPresentationAttribute(name)));
        return result;
    }
    case JSSVGCircleElement::GetBBoxFuncNum: {


        KJS::JSValue* result = toJS(exec, new JSSVGPODTypeWrapperCreatorReadOnly<FloatRect>(imp->getBBox()), imp);
        return result;
    }
    case JSSVGCircleElement::GetCTMFuncNum: {


        KJS::JSValue* result = toJS(exec, new JSSVGPODTypeWrapperCreatorReadOnly<AffineTransform>(imp->getCTM()), imp);
        return result;
    }
    case JSSVGCircleElement::GetScreenCTMFuncNum: {


        KJS::JSValue* result = toJS(exec, new JSSVGPODTypeWrapperCreatorReadOnly<AffineTransform>(imp->getScreenCTM()), imp);
        return result;
    }
    case JSSVGCircleElement::GetTransformToElementFuncNum: {
        ExceptionCode ec = 0;
        SVGElement* element = toSVGElement(args[0]);


        KJS::JSValue* result = toJS(exec, new JSSVGPODTypeWrapperCreatorReadOnly<AffineTransform>(imp->getTransformToElement(element, ec)), imp);
        setDOMException(exec, ec);
        return result;
    }
    }
    return 0;
}

}

#endif // ENABLE(SVG)
