/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGMarkerElement.h"

#include <wtf/GetPtr.h>

#include "CSSMutableStyleDeclaration.h"
#include "CSSStyleDeclaration.h"
#include "CSSValue.h"
#include "JSCSSStyleDeclaration.h"
#include "JSCSSValue.h"
#include "JSSVGAngle.h"
#include "JSSVGAnimatedAngle.h"
#include "JSSVGAnimatedBoolean.h"
#include "JSSVGAnimatedEnumeration.h"
#include "JSSVGAnimatedLength.h"
#include "JSSVGAnimatedPreserveAspectRatio.h"
#include "JSSVGAnimatedRect.h"
#include "JSSVGAnimatedString.h"
#include "PlatformString.h"
#include "SVGMarkerElement.h"

using namespace KJS;

namespace WebCore {

/* Hash table */

static const HashEntry JSSVGMarkerElementTableEntries[] =
{
    { "refX", JSSVGMarkerElement::RefXAttrNum, DontDelete|ReadOnly, 0, &JSSVGMarkerElementTableEntries[16] },
    { 0, 0, 0, 0, 0 },
    { "xmlspace", JSSVGMarkerElement::XmlspaceAttrNum, DontDelete, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { "orientAngle", JSSVGMarkerElement::OrientAngleAttrNum, DontDelete|ReadOnly, 0, 0 },
    { "externalResourcesRequired", JSSVGMarkerElement::ExternalResourcesRequiredAttrNum, DontDelete|ReadOnly, 0, &JSSVGMarkerElementTableEntries[19] },
    { "className", JSSVGMarkerElement::ClassNameAttrNum, DontDelete|ReadOnly, 0, 0 },
    { "refY", JSSVGMarkerElement::RefYAttrNum, DontDelete|ReadOnly, 0, &JSSVGMarkerElementTableEntries[15] },
    { 0, 0, 0, 0, 0 },
    { "markerUnits", JSSVGMarkerElement::MarkerUnitsAttrNum, DontDelete|ReadOnly, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { "style", JSSVGMarkerElement::StyleAttrNum, DontDelete|ReadOnly, 0, 0 },
    { "constructor", JSSVGMarkerElement::ConstructorAttrNum, DontDelete|DontEnum|ReadOnly, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { "markerWidth", JSSVGMarkerElement::MarkerWidthAttrNum, DontDelete|ReadOnly, 0, 0 },
    { "markerHeight", JSSVGMarkerElement::MarkerHeightAttrNum, DontDelete|ReadOnly, 0, 0 },
    { "orientType", JSSVGMarkerElement::OrientTypeAttrNum, DontDelete|ReadOnly, 0, &JSSVGMarkerElementTableEntries[17] },
    { "xmllang", JSSVGMarkerElement::XmllangAttrNum, DontDelete, 0, &JSSVGMarkerElementTableEntries[18] },
    { "viewBox", JSSVGMarkerElement::ViewBoxAttrNum, DontDelete|ReadOnly, 0, 0 },
    { "preserveAspectRatio", JSSVGMarkerElement::PreserveAspectRatioAttrNum, DontDelete|ReadOnly, 0, 0 }
};

static const HashTable JSSVGMarkerElementTable = 
{
    2, 20, JSSVGMarkerElementTableEntries, 15
};

/* Hash table for constructor */

static const HashEntry JSSVGMarkerElementConstructorTableEntries[] =
{
    { "SVG_MARKERUNITS_UNKNOWN", SVGMarkerElement::SVG_MARKERUNITS_UNKNOWN, DontDelete|ReadOnly, 0, 0 },
    { "SVG_MARKERUNITS_USERSPACEONUSE", SVGMarkerElement::SVG_MARKERUNITS_USERSPACEONUSE, DontDelete|ReadOnly, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { "SVG_MARKER_ORIENT_UNKNOWN", SVGMarkerElement::SVG_MARKER_ORIENT_UNKNOWN, DontDelete|ReadOnly, 0, 0 },
    { "SVG_MARKERUNITS_STROKEWIDTH", SVGMarkerElement::SVG_MARKERUNITS_STROKEWIDTH, DontDelete|ReadOnly, 0, &JSSVGMarkerElementConstructorTableEntries[6] },
    { "SVG_MARKER_ORIENT_ANGLE", SVGMarkerElement::SVG_MARKER_ORIENT_ANGLE, DontDelete|ReadOnly, 0, 0 },
    { "SVG_MARKER_ORIENT_AUTO", SVGMarkerElement::SVG_MARKER_ORIENT_AUTO, DontDelete|ReadOnly, 0, 0 }
};

static const HashTable JSSVGMarkerElementConstructorTable = 
{
    2, 7, JSSVGMarkerElementConstructorTableEntries, 6
};

class JSSVGMarkerElementConstructor : public DOMObject {
public:
    JSSVGMarkerElementConstructor(ExecState* exec)
    {
        setPrototype(exec->lexicalInterpreter()->builtinObjectPrototype());
        putDirect(exec->propertyNames().prototype, JSSVGMarkerElementPrototype::self(exec), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    JSValue* getValueProperty(ExecState*, int token) const;
    virtual const ClassInfo* classInfo() const { return &info; }
    static const ClassInfo info;

    virtual bool implementsHasInstance() const { return true; }
};

const ClassInfo JSSVGMarkerElementConstructor::info = { "SVGMarkerElementConstructor", 0, &JSSVGMarkerElementConstructorTable, 0 };

bool JSSVGMarkerElementConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGMarkerElementConstructor, DOMObject>(exec, &JSSVGMarkerElementConstructorTable, this, propertyName, slot);
}

JSValue* JSSVGMarkerElementConstructor::getValueProperty(ExecState*, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(token);
}

/* Hash table for prototype */

static const HashEntry JSSVGMarkerElementPrototypeTableEntries[] =
{
    { "getPresentationAttribute", JSSVGMarkerElement::GetPresentationAttributeFuncNum, DontDelete|Function, 1, 0 },
    { "setOrientToAuto", JSSVGMarkerElement::SetOrientToAutoFuncNum, DontDelete|Function, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { "SVG_MARKERUNITS_UNKNOWN", SVGMarkerElement::SVG_MARKERUNITS_UNKNOWN, DontDelete|ReadOnly, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { "SVG_MARKER_ORIENT_UNKNOWN", SVGMarkerElement::SVG_MARKER_ORIENT_UNKNOWN, DontDelete|ReadOnly, 0, 0 },
    { "SVG_MARKERUNITS_USERSPACEONUSE", SVGMarkerElement::SVG_MARKERUNITS_USERSPACEONUSE, DontDelete|ReadOnly, 0, &JSSVGMarkerElementPrototypeTableEntries[9] },
    { "SVG_MARKER_ORIENT_ANGLE", SVGMarkerElement::SVG_MARKER_ORIENT_ANGLE, DontDelete|ReadOnly, 0, &JSSVGMarkerElementPrototypeTableEntries[11] },
    { "SVG_MARKERUNITS_STROKEWIDTH", SVGMarkerElement::SVG_MARKERUNITS_STROKEWIDTH, DontDelete|ReadOnly, 0, &JSSVGMarkerElementPrototypeTableEntries[10] },
    { "SVG_MARKER_ORIENT_AUTO", SVGMarkerElement::SVG_MARKER_ORIENT_AUTO, DontDelete|ReadOnly, 0, 0 },
    { "setOrientToAngle", JSSVGMarkerElement::SetOrientToAngleFuncNum, DontDelete|Function, 1, 0 }
};

static const HashTable JSSVGMarkerElementPrototypeTable = 
{
    2, 12, JSSVGMarkerElementPrototypeTableEntries, 9
};

const ClassInfo JSSVGMarkerElementPrototype::info = { "SVGMarkerElementPrototype", 0, &JSSVGMarkerElementPrototypeTable, 0 };

JSObject* JSSVGMarkerElementPrototype::self(ExecState* exec)
{
    return KJS::cacheGlobalObject<JSSVGMarkerElementPrototype>(exec, "[[JSSVGMarkerElement.prototype]]");
}

bool JSSVGMarkerElementPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticPropertySlot<JSSVGMarkerElementPrototypeFunction, JSSVGMarkerElementPrototype, JSObject>(exec, &JSSVGMarkerElementPrototypeTable, this, propertyName, slot);
}

JSValue* JSSVGMarkerElementPrototype::getValueProperty(ExecState*, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(token);
}

const ClassInfo JSSVGMarkerElement::info = { "SVGMarkerElement", &JSSVGElement::info, &JSSVGMarkerElementTable, 0 };

JSSVGMarkerElement::JSSVGMarkerElement(ExecState* exec, SVGMarkerElement* impl)
    : JSSVGElement(exec, impl)
{
    setPrototype(JSSVGMarkerElementPrototype::self(exec));
}

bool JSSVGMarkerElement::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGMarkerElement, JSSVGElement>(exec, &JSSVGMarkerElementTable, this, propertyName, slot);
}

JSValue* JSSVGMarkerElement::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case RefXAttrNum: {
        SVGMarkerElement* imp = static_cast<SVGMarkerElement*>(impl());

        RefPtr<SVGAnimatedLength> obj = imp->refXAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case RefYAttrNum: {
        SVGMarkerElement* imp = static_cast<SVGMarkerElement*>(impl());

        RefPtr<SVGAnimatedLength> obj = imp->refYAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case MarkerUnitsAttrNum: {
        SVGMarkerElement* imp = static_cast<SVGMarkerElement*>(impl());

        RefPtr<SVGAnimatedEnumeration> obj = imp->markerUnitsAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case MarkerWidthAttrNum: {
        SVGMarkerElement* imp = static_cast<SVGMarkerElement*>(impl());

        RefPtr<SVGAnimatedLength> obj = imp->markerWidthAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case MarkerHeightAttrNum: {
        SVGMarkerElement* imp = static_cast<SVGMarkerElement*>(impl());

        RefPtr<SVGAnimatedLength> obj = imp->markerHeightAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case OrientTypeAttrNum: {
        SVGMarkerElement* imp = static_cast<SVGMarkerElement*>(impl());

        RefPtr<SVGAnimatedEnumeration> obj = imp->orientTypeAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case OrientAngleAttrNum: {
        SVGMarkerElement* imp = static_cast<SVGMarkerElement*>(impl());

        RefPtr<SVGAnimatedAngle> obj = imp->orientAngleAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case XmllangAttrNum: {
        SVGMarkerElement* imp = static_cast<SVGMarkerElement*>(impl());

        return jsString(imp->xmllang());
    }
    case XmlspaceAttrNum: {
        SVGMarkerElement* imp = static_cast<SVGMarkerElement*>(impl());

        return jsString(imp->xmlspace());
    }
    case ExternalResourcesRequiredAttrNum: {
        SVGMarkerElement* imp = static_cast<SVGMarkerElement*>(impl());

        RefPtr<SVGAnimatedBoolean> obj = imp->externalResourcesRequiredAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ClassNameAttrNum: {
        SVGMarkerElement* imp = static_cast<SVGMarkerElement*>(impl());

        RefPtr<SVGAnimatedString> obj = imp->classNameAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case StyleAttrNum: {
        SVGMarkerElement* imp = static_cast<SVGMarkerElement*>(impl());

        return toJS(exec, WTF::getPtr(imp->style()));
    }
    case ViewBoxAttrNum: {
        SVGMarkerElement* imp = static_cast<SVGMarkerElement*>(impl());

        RefPtr<SVGAnimatedRect> obj = imp->viewBoxAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case PreserveAspectRatioAttrNum: {
        SVGMarkerElement* imp = static_cast<SVGMarkerElement*>(impl());

        RefPtr<SVGAnimatedPreserveAspectRatio> obj = imp->preserveAspectRatioAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ConstructorAttrNum:
        return getConstructor(exec);
    }
    return 0;
}

void JSSVGMarkerElement::put(ExecState* exec, const Identifier& propertyName, JSValue* value, int attr)
{
    lookupPut<JSSVGMarkerElement, JSSVGElement>(exec, propertyName, value, attr, &JSSVGMarkerElementTable, this);
}

void JSSVGMarkerElement::putValueProperty(ExecState* exec, int token, JSValue* value, int /*attr*/)
{
    switch (token) {
    case XmllangAttrNum: {
        SVGMarkerElement* imp = static_cast<SVGMarkerElement*>(impl());

        imp->setXmllang(value->toString(exec));
        break;
    }
    case XmlspaceAttrNum: {
        SVGMarkerElement* imp = static_cast<SVGMarkerElement*>(impl());

        imp->setXmlspace(value->toString(exec));
        break;
    }
    }
}

JSValue* JSSVGMarkerElement::getConstructor(ExecState* exec)
{
    return KJS::cacheGlobalObject<JSSVGMarkerElementConstructor>(exec, "[[SVGMarkerElement.constructor]]");
}
JSValue* JSSVGMarkerElementPrototypeFunction::callAsFunction(ExecState* exec, JSObject* thisObj, const List& args)
{
    if (!thisObj->inherits(&JSSVGMarkerElement::info))
      return throwError(exec, TypeError);

    JSSVGMarkerElement* castedThisObj = static_cast<JSSVGMarkerElement*>(thisObj);
    SVGMarkerElement* imp = static_cast<SVGMarkerElement*>(castedThisObj->impl());

    switch (id) {
    case JSSVGMarkerElement::SetOrientToAutoFuncNum: {

        imp->setOrientToAuto();
        return jsUndefined();
    }
    case JSSVGMarkerElement::SetOrientToAngleFuncNum: {
        SVGAngle* angle = toSVGAngle(args[0]);

        imp->setOrientToAngle(angle);
        return jsUndefined();
    }
    case JSSVGMarkerElement::GetPresentationAttributeFuncNum: {
        String name = args[0]->toString(exec);


        KJS::JSValue* result = toJS(exec, WTF::getPtr(imp->getPresentationAttribute(name)));
        return result;
    }
    }
    return 0;
}

}

#endif // ENABLE(SVG)
