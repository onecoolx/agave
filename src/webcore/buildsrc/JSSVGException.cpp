/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGException.h"

#include <wtf/GetPtr.h>

#include "SVGException.h"

using namespace KJS;

namespace WebCore {

/* Hash table */

static const HashEntry JSSVGExceptionTableEntries[] =
{
    { "constructor", JSSVGException::ConstructorAttrNum, DontDelete|DontEnum|ReadOnly, 0, 0 }
};

static const HashTable JSSVGExceptionTable = 
{
    2, 1, JSSVGExceptionTableEntries, 1
};

/* Hash table for constructor */

static const HashEntry JSSVGExceptionConstructorTableEntries[] =
{
    { "SVG_INVALID_VALUE_ERR", SVGException::SVG_INVALID_VALUE_ERR, DontDelete|ReadOnly, 0, &JSSVGExceptionConstructorTableEntries[3] },
    { 0, 0, 0, 0, 0 },
    { "SVG_WRONG_TYPE_ERR", SVGException::SVG_WRONG_TYPE_ERR, DontDelete|ReadOnly, 0, 0 },
    { "SVG_MATRIX_NOT_INVERTABLE", SVGException::SVG_MATRIX_NOT_INVERTABLE, DontDelete|ReadOnly, 0, 0 }
};

static const HashTable JSSVGExceptionConstructorTable = 
{
    2, 4, JSSVGExceptionConstructorTableEntries, 3
};

class JSSVGExceptionConstructor : public DOMObject {
public:
    JSSVGExceptionConstructor(ExecState* exec)
    {
        setPrototype(exec->lexicalInterpreter()->builtinObjectPrototype());
        putDirect(exec->propertyNames().prototype, JSSVGExceptionPrototype::self(exec), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    JSValue* getValueProperty(ExecState*, int token) const;
    virtual const ClassInfo* classInfo() const { return &info; }
    static const ClassInfo info;

    virtual bool implementsHasInstance() const { return true; }
};

const ClassInfo JSSVGExceptionConstructor::info = { "SVGExceptionConstructor", 0, &JSSVGExceptionConstructorTable, 0 };

bool JSSVGExceptionConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGExceptionConstructor, DOMObject>(exec, &JSSVGExceptionConstructorTable, this, propertyName, slot);
}

JSValue* JSSVGExceptionConstructor::getValueProperty(ExecState*, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(token);
}

/* Hash table for prototype */

static const HashEntry JSSVGExceptionPrototypeTableEntries[] =
{
    { "SVG_INVALID_VALUE_ERR", SVGException::SVG_INVALID_VALUE_ERR, DontDelete|ReadOnly, 0, &JSSVGExceptionPrototypeTableEntries[3] },
    { 0, 0, 0, 0, 0 },
    { "SVG_WRONG_TYPE_ERR", SVGException::SVG_WRONG_TYPE_ERR, DontDelete|ReadOnly, 0, 0 },
    { "SVG_MATRIX_NOT_INVERTABLE", SVGException::SVG_MATRIX_NOT_INVERTABLE, DontDelete|ReadOnly, 0, 0 }
};

static const HashTable JSSVGExceptionPrototypeTable = 
{
    2, 4, JSSVGExceptionPrototypeTableEntries, 3
};

const ClassInfo JSSVGExceptionPrototype::info = { "SVGExceptionPrototype", 0, &JSSVGExceptionPrototypeTable, 0 };

JSObject* JSSVGExceptionPrototype::self(ExecState* exec)
{
    return KJS::cacheGlobalObject<JSSVGExceptionPrototype>(exec, "[[JSSVGException.prototype]]");
}

bool JSSVGExceptionPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGExceptionPrototype, JSObject>(exec, &JSSVGExceptionPrototypeTable, this, propertyName, slot);
}

JSValue* JSSVGExceptionPrototype::getValueProperty(ExecState*, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(token);
}

const ClassInfo JSSVGException::info = { "SVGException", 0, &JSSVGExceptionTable, 0 };

JSSVGException::JSSVGException(ExecState* exec, SVGException* impl, SVGElement* context)
    : m_context(context)
    , m_impl(impl)
{
    setPrototype(JSSVGExceptionPrototype::self(exec));
}

JSSVGException::~JSSVGException()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSSVGException::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGException, KJS::DOMObject>(exec, &JSSVGExceptionTable, this, propertyName, slot);
}

JSValue* JSSVGException::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case ConstructorAttrNum:
        return getConstructor(exec);
    }
    return 0;
}

JSValue* JSSVGException::getConstructor(ExecState* exec)
{
    return KJS::cacheGlobalObject<JSSVGExceptionConstructor>(exec, "[[SVGException.constructor]]");
}
KJS::JSValue* toJS(KJS::ExecState* exec, SVGException* obj, SVGElement* context)
{
    return KJS::cacheSVGDOMObject<SVGException, JSSVGException>(exec, obj, context);
}
SVGException* toSVGException(KJS::JSValue* val)
{
    return val->isObject(&JSSVGException::info) ? static_cast<JSSVGException*>(val)->impl() : 0;
}

}

#endif // ENABLE(SVG)
