/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG) && ENABLE(SVG_EXPERIMENTAL_FEATURES)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGComponentTransferFunctionElement.h"

#include <wtf/GetPtr.h>

#include "JSSVGAnimatedEnumeration.h"
#include "JSSVGAnimatedNumber.h"
#include "JSSVGAnimatedNumberList.h"
#include "SVGComponentTransferFunctionElement.h"

using namespace KJS;

namespace WebCore {

/* Hash table */

static const HashEntry JSSVGComponentTransferFunctionElementTableEntries[] =
{
    { "tableValues", JSSVGComponentTransferFunctionElement::TableValuesAttrNum, DontDelete|ReadOnly, 0, 0 },
    { "amplitude", JSSVGComponentTransferFunctionElement::AmplitudeAttrNum, DontDelete|ReadOnly, 0, &JSSVGComponentTransferFunctionElementTableEntries[11] },
    { 0, 0, 0, 0, 0 },
    { "type", JSSVGComponentTransferFunctionElement::TypeAttrNum, DontDelete|ReadOnly, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { "slope", JSSVGComponentTransferFunctionElement::SlopeAttrNum, DontDelete|ReadOnly, 0, &JSSVGComponentTransferFunctionElementTableEntries[8] },
    { 0, 0, 0, 0, 0 },
    { "intercept", JSSVGComponentTransferFunctionElement::InterceptAttrNum, DontDelete|ReadOnly, 0, &JSSVGComponentTransferFunctionElementTableEntries[9] },
    { "exponent", JSSVGComponentTransferFunctionElement::ExponentAttrNum, DontDelete|ReadOnly, 0, &JSSVGComponentTransferFunctionElementTableEntries[10] },
    { "offset", JSSVGComponentTransferFunctionElement::OffsetAttrNum, DontDelete|ReadOnly, 0, 0 },
    { "constructor", JSSVGComponentTransferFunctionElement::ConstructorAttrNum, DontDelete|DontEnum|ReadOnly, 0, 0 }
};

static const HashTable JSSVGComponentTransferFunctionElementTable = 
{
    2, 12, JSSVGComponentTransferFunctionElementTableEntries, 8
};

/* Hash table for constructor */

static const HashEntry JSSVGComponentTransferFunctionElementConstructorTableEntries[] =
{
    { "SVG_FECOMPONENTTRANSFER_TYPE_TABLE", WebCore::SVG_FECOMPONENTTRANSFER_TYPE_TABLE, DontDelete|ReadOnly, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { "SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE", WebCore::SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE, DontDelete|ReadOnly, 0, 0 },
    { "SVG_FECOMPONENTTRANSFER_TYPE_LINEAR", WebCore::SVG_FECOMPONENTTRANSFER_TYPE_LINEAR, DontDelete|ReadOnly, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { "SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN", WebCore::SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN, DontDelete|ReadOnly, 0, &JSSVGComponentTransferFunctionElementConstructorTableEntries[6] },
    { "SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY", WebCore::SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY, DontDelete|ReadOnly, 0, &JSSVGComponentTransferFunctionElementConstructorTableEntries[7] },
    { "SVG_FECOMPONENTTRANSFER_TYPE_GAMMA", WebCore::SVG_FECOMPONENTTRANSFER_TYPE_GAMMA, DontDelete|ReadOnly, 0, 0 }
};

static const HashTable JSSVGComponentTransferFunctionElementConstructorTable = 
{
    2, 8, JSSVGComponentTransferFunctionElementConstructorTableEntries, 6
};

class JSSVGComponentTransferFunctionElementConstructor : public DOMObject {
public:
    JSSVGComponentTransferFunctionElementConstructor(ExecState* exec)
    {
        setPrototype(exec->lexicalInterpreter()->builtinObjectPrototype());
        putDirect(exec->propertyNames().prototype, JSSVGComponentTransferFunctionElementPrototype::self(exec), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    JSValue* getValueProperty(ExecState*, int token) const;
    virtual const ClassInfo* classInfo() const { return &info; }
    static const ClassInfo info;

    virtual bool implementsHasInstance() const { return true; }
};

const ClassInfo JSSVGComponentTransferFunctionElementConstructor::info = { "SVGComponentTransferFunctionElementConstructor", 0, &JSSVGComponentTransferFunctionElementConstructorTable, 0 };

bool JSSVGComponentTransferFunctionElementConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGComponentTransferFunctionElementConstructor, DOMObject>(exec, &JSSVGComponentTransferFunctionElementConstructorTable, this, propertyName, slot);
}

JSValue* JSSVGComponentTransferFunctionElementConstructor::getValueProperty(ExecState*, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(token);
}

/* Hash table for prototype */

static const HashEntry JSSVGComponentTransferFunctionElementPrototypeTableEntries[] =
{
    { "SVG_FECOMPONENTTRANSFER_TYPE_TABLE", WebCore::SVG_FECOMPONENTTRANSFER_TYPE_TABLE, DontDelete|ReadOnly, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { "SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE", WebCore::SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE, DontDelete|ReadOnly, 0, 0 },
    { "SVG_FECOMPONENTTRANSFER_TYPE_LINEAR", WebCore::SVG_FECOMPONENTTRANSFER_TYPE_LINEAR, DontDelete|ReadOnly, 0, 0 },
    { 0, 0, 0, 0, 0 },
    { "SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN", WebCore::SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN, DontDelete|ReadOnly, 0, &JSSVGComponentTransferFunctionElementPrototypeTableEntries[6] },
    { "SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY", WebCore::SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY, DontDelete|ReadOnly, 0, &JSSVGComponentTransferFunctionElementPrototypeTableEntries[7] },
    { "SVG_FECOMPONENTTRANSFER_TYPE_GAMMA", WebCore::SVG_FECOMPONENTTRANSFER_TYPE_GAMMA, DontDelete|ReadOnly, 0, 0 }
};

static const HashTable JSSVGComponentTransferFunctionElementPrototypeTable = 
{
    2, 8, JSSVGComponentTransferFunctionElementPrototypeTableEntries, 6
};

const ClassInfo JSSVGComponentTransferFunctionElementPrototype::info = { "SVGComponentTransferFunctionElementPrototype", 0, &JSSVGComponentTransferFunctionElementPrototypeTable, 0 };

JSObject* JSSVGComponentTransferFunctionElementPrototype::self(ExecState* exec)
{
    return KJS::cacheGlobalObject<JSSVGComponentTransferFunctionElementPrototype>(exec, "[[JSSVGComponentTransferFunctionElement.prototype]]");
}

bool JSSVGComponentTransferFunctionElementPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGComponentTransferFunctionElementPrototype, JSObject>(exec, &JSSVGComponentTransferFunctionElementPrototypeTable, this, propertyName, slot);
}

JSValue* JSSVGComponentTransferFunctionElementPrototype::getValueProperty(ExecState*, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(token);
}

const ClassInfo JSSVGComponentTransferFunctionElement::info = { "SVGComponentTransferFunctionElement", &JSSVGElement::info, &JSSVGComponentTransferFunctionElementTable, 0 };

JSSVGComponentTransferFunctionElement::JSSVGComponentTransferFunctionElement(ExecState* exec, SVGComponentTransferFunctionElement* impl)
    : JSSVGElement(exec, impl)
{
    setPrototype(JSSVGComponentTransferFunctionElementPrototype::self(exec));
}

bool JSSVGComponentTransferFunctionElement::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGComponentTransferFunctionElement, JSSVGElement>(exec, &JSSVGComponentTransferFunctionElementTable, this, propertyName, slot);
}

JSValue* JSSVGComponentTransferFunctionElement::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case TypeAttrNum: {
        SVGComponentTransferFunctionElement* imp = static_cast<SVGComponentTransferFunctionElement*>(impl());

        RefPtr<SVGAnimatedEnumeration> obj = imp->typeAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case TableValuesAttrNum: {
        SVGComponentTransferFunctionElement* imp = static_cast<SVGComponentTransferFunctionElement*>(impl());

        RefPtr<SVGAnimatedNumberList> obj = imp->tableValuesAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case SlopeAttrNum: {
        SVGComponentTransferFunctionElement* imp = static_cast<SVGComponentTransferFunctionElement*>(impl());

        RefPtr<SVGAnimatedNumber> obj = imp->slopeAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case InterceptAttrNum: {
        SVGComponentTransferFunctionElement* imp = static_cast<SVGComponentTransferFunctionElement*>(impl());

        RefPtr<SVGAnimatedNumber> obj = imp->interceptAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case AmplitudeAttrNum: {
        SVGComponentTransferFunctionElement* imp = static_cast<SVGComponentTransferFunctionElement*>(impl());

        RefPtr<SVGAnimatedNumber> obj = imp->amplitudeAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ExponentAttrNum: {
        SVGComponentTransferFunctionElement* imp = static_cast<SVGComponentTransferFunctionElement*>(impl());

        RefPtr<SVGAnimatedNumber> obj = imp->exponentAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case OffsetAttrNum: {
        SVGComponentTransferFunctionElement* imp = static_cast<SVGComponentTransferFunctionElement*>(impl());

        RefPtr<SVGAnimatedNumber> obj = imp->offsetAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ConstructorAttrNum:
        return getConstructor(exec);
    }
    return 0;
}

JSValue* JSSVGComponentTransferFunctionElement::getConstructor(ExecState* exec)
{
    return KJS::cacheGlobalObject<JSSVGComponentTransferFunctionElementConstructor>(exec, "[[SVGComponentTransferFunctionElement.constructor]]");
}

}

#endif // ENABLE(SVG) && ENABLE(SVG_EXPERIMENTAL_FEATURES)
